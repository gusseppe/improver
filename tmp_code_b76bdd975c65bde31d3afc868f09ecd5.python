import pandas as pd
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score

# Load the reference data
dataset_folder = "datasets/financial"

X_train_reference = pd.read_csv(f"{dataset_folder}/X_train_reference.csv")
X_test_reference = pd.read_csv(f"{dataset_folder}/X_test_reference.csv")
y_train_reference = pd.read_csv(f"{dataset_folder}/y_train_reference.csv").squeeze("columns")
y_test_reference = pd.read_csv(f"{dataset_folder}/y_test_reference.csv").squeeze("columns")

# Load the new data
X_train_new = pd.read_csv(f"{dataset_folder}/X_train_new.csv")
X_test_new = pd.read_csv(f"{dataset_folder}/X_test_new.csv")
y_train_new = pd.read_csv(f"{dataset_folder}/y_train_new.csv").squeeze("columns")
y_test_new = pd.read_csv(f"{dataset_folder}/y_test_new.csv").squeeze("columns")

# Train the model on the reference data
model_reference = GradientBoostingClassifier(
  n_estimators=100,
  learning_rate=0.1,
  max_depth=6,
  random_state=42
)

model_reference.fit(X_train_reference, y_train_reference)

# Test the model on the initial test set
initial_accuracy = accuracy_score(y_test_reference, model_reference.predict(X_test_reference))
print(f'Model trained and evaluated on the reference distribution: {initial_accuracy}')

# Test the model on the new test set
new_accuracy = accuracy_score(y_test_new, model_reference.predict(X_test_new))
print(f'Reference model evaluated on the new distribution: {new_accuracy}')

# Train a new model on the combined data
X_train = pd.concat([X_train_reference, X_train_new])
y_train = pd.concat([y_train_reference, y_train_new])

model_new = GradientBoostingClassifier(
  n_estimators=100,
  learning_rate=0.1,
  max_depth=6,
  random_state=42
)

model_new.fit(X_train, y_train)

# Test the new model on the reference and new test sets
new_accuracy_reference = accuracy_score(y_test_reference, model_new.predict(X_test_reference))
print(f'New model evaluated on reference distribution: {new_accuracy_reference}')

new_accuracy_new = accuracy_score(y_test_new, model_new.predict(X_test_new))
print(f'New model evaluated on new distribution: {new_accuracy_new}')
